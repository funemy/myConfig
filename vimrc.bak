" set space as <leader>
let mapleader=" "
"switching tab
"dog-fucked alt key
"alt-[
map “ :tabp<CR>
"alt-]
map ‘ :tabn<CR>
"alt-w
map ∑ :tabc<CR>
" vundle config
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'https://github.com/klen/python-mode'
Plugin 'bling/vim-airline'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'kien/ctrlp.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
syn on                      "语法支持
syntax enable
set background=dark
colorscheme solarized
filetype off                  " required

" arline config
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

"syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"tagbar config
nmap <F8> :TagbarToggle<CR>

"common conf {{             通用配置
set et
set ai                      "自动缩进
set ci
set sw=4
set ts=4
set bs=2                    "在insert模式下用退格键删除
set smartindent
set nocompatible            " be iMproved, required
set showmatch               "代码匹配
set laststatus=2            "总是显示状态行
set expandtab               "以下三个配置配合使用，设置tab和缩进空格数
set shiftwidth=4
set tabstop=4
set cursorline              "高亮当前行
set cursorcolumn            "高亮当前列
set number                  "显示行号
set autoread                "文件在Vim之外修改过，自动重新读入
set history=500
set scrolloff=5

set nobackup                "禁止生成临时文件
set noswapfile              "禁止生成临时文件
set mouse=a                 "允许鼠标操作
set selection=exclusive
set selectmode=mouse,key
set modeline
set incsearch
set confirm                 "处理未保存和只读文件时，弹出确认
set ignorecase              "检索时忽略大小写
set fileencodings=uft-8 "使用utf-8或gbk打开文件
set enc=utf-8
set hls                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
"set foldmethod=syntax       "代码折叠
au BufRead *.py map <buffer> <F5> :w<CR>:!/usr/bin/env python3 % <CR>
"}}
"NERDTree config
"autocmd vimenter * NERDTree "自动载入NERDTree
"在无文件时自动载入NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-t> :NERDTreeToggle<CR>
map <leader>t :NERDTreeToggle<CR>

"YCM config
set completeopt=longest,menu
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif
let g:ycm_confirm_extra_conf=0
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_cache_omnifunc=0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1
let g:ycm_collect_identifiers_from_comments_and_strings=0
let g:ycm_python_binary_path='/usr/local/bin/python3'
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

"pymode config
"disable the completion on dot funtion
"due to the conflict with YCM
"let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope=0
let g:pymode_python='python3'

" nerd commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" supertab config
let g:SuperTabRetainCompletionType=2


